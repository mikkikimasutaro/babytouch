import { onCall } from "firebase-functions/v2/https";
import { VertexAI } from "@google-cloud/vertexai";
import * as logger from "firebase-functions/logger";
import { initializeApp } from "firebase-admin/app";
import { getFirestore } from "firebase-admin/firestore";

initializeApp();
const db = getFirestore();

const vertexAI = new VertexAI({
  project: "babytouch-63ad3",
  location: "asia-northeast1"
});

interface TouchOperation {
  x: number;
  y: number;
  timestamp: number;
  type: "tap" | "drag" | "hold";
  duration?: number;
  velocity?: number;
}

interface AnalyzeTouchPayload {
  operations: TouchOperation[];
  nickname?: string;
  birthMonth?: string;
  gender?: string;
}

interface AIResponse {
  emotion: string;
  message: string;
}

export const analyzeTouchHistory = onCall({ region: "asia-northeast1" }, async (request): Promise<AIResponse> => {
  const { operations, nickname, birthMonth, gender } = request.data as AnalyzeTouchPayload;
  logger.info("Received touch history:", operations);

  if (!Array.isArray(operations) || operations.length === 0) {
    throw new Error("Êìç‰ΩúÂ±•Ê≠¥„ÅåÁÑ°Âäπ„Åß„Åô");
  }

  const userInfo = `
„Äê„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„Äë
„Éã„ÉÉ„ÇØ„Éç„Éº„É†: ${nickname || "Êú™Ë®≠ÂÆö"}
Ë™ïÁîüÂπ¥Êúà: ${birthMonth || "‰∏çÊòé"}
ÊÄßÂà•: ${gender || "‰∏çÊòé"}
`;

  const prompt = `
‰ª•‰∏ã„ÅØËµ§„Å°„ÇÉ„Çì„ÅÆ„Çø„ÉÉ„ÉÅÊìç‰ΩúÂ±•Ê≠¥„Åß„Åô„ÄÇ${userInfo}„ÅÆÂÜÖÂÆπ„ÇÇÂèÇËÄÉ„Å´„Åó„Å™„Åå„Çâ„ÄÅË°åÂãï„Åã„ÇâÊÉ≥ÂÉè„Åï„Çå„ÇãÊÑüÊÉÖ„Çí‰ª•‰∏ã„ÅÆÂÄôË£ú„Åã„Çâ1„Å§ÈÅ∏„Å≥„ÄÅ
„Äåemotion: ‚óØ‚óØ„Äç„Å®„ÅÑ„ÅÜÂΩ¢Âºè„ÅßË°®Áèæ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
Ê¨°„Å´„ÄÅÊé®ÂÆö„Åó„ÅüÊÑüÊÉÖ„Å´Èñ¢„Åó„Å¶„ÄÅ„Å™„Åú„Åù„ÅÆÊÑüÊÉÖ„Å†„Å®Êé®ÂÆö„Åó„Åü„Åã„ÅÆÁêÜÁî±„ÇíÂê´„Çì„Å†ÂΩ¢„Åß„ÄÅËµ§„Å°„ÇÉ„ÇìÂêë„Åë„ÅÆËøî‰∫ã„Çí„Äåmessage: ‚óØ‚óØ„Äç„Å®„ÅÑ„ÅÜÂΩ¢Âºè„ÅßÊó•Êú¨Ë™û„ÅßÊõ∏„ÅÑ„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

emotion ÂÄôË£ú: joyful, excited, calm, surprised, curious, explorative

Âá∫ÂäõÂΩ¢Âºè„ÅÆ‰æãÔºö
emotion: excited
message: Áü≠„ÅÑÊôÇÈñì„Åß„Åü„Åè„Åï„Çì„Çø„ÉÉ„ÉÅ„Åó„Å¶„ÅÑ„Çã„Åã„Çâ„ÄÅ„Å®„Å£„Å¶„ÇÇ„Çè„Åè„Çè„Åè„Åó„Å¶„ÅÑ„Çã„ÅÆ„Åã„Å™Ôºü

Êìç‰ΩúÂ±•Ê≠¥:
${JSON.stringify(operations.slice(-5), null, 2)}
`;

  const generativeModel = vertexAI.getGenerativeModel({ model: "gemini-1.5-flash" });
  const result = await generativeModel.generateContent({
    contents: [
      {
        role: "user",
        parts: [{ text: prompt }]
      }
    ]
  });

  const rawText = result.response.candidates?.[0]?.content?.parts?.[0]?.text ?? "";
  logger.info("Gemini response:", rawText);

  const aiResponse = parseGeminiResponse(rawText);

  // üî• Firestore „Å´‰øùÂ≠ò
  const today = new Date();
  const ymd = today.toISOString().split('T')[0]; // ‰æã: 2025-06-18

  const parentDocRef = db.collection("emotionLogs").doc(ymd);

  // Ë¶™„Éâ„Ç≠„É•„É°„É≥„Éà„ÇíÁ¢∫‰øùÔºàÂ≠òÂú®„Åó„Å™„ÅÑÂ†¥Âêà„ÅØ‰Ωú„ÇãÔºâ
  await parentDocRef.set({ createdAt: today.toISOString() }, { merge: true });

  // „Çµ„Éñ„Ç≥„É¨„ÇØ„Ç∑„Éß„É≥„Å´ËøΩÂä†
  await parentDocRef.collection("entries").add({
    timestamp: today.toISOString(),
    nickname: nickname || null,
    birthMonth: birthMonth || null,
    gender: gender || null,
    emotion: aiResponse.emotion,
    message: aiResponse.message,
    operations: operations.slice(-5)
  });

  return aiResponse;
});

function parseGeminiResponse(text: string): AIResponse {
  const lines = text.trim().split("\n");
  const emotionLine = lines.find(line => line.toLowerCase().startsWith("emotion:"));
  const messageLine = lines.find(line => line.toLowerCase().startsWith("message:"));

  return {
    emotion: emotionLine?.split(":")[1]?.trim() || "curious",
    message: messageLine?.split(":")[1]?.trim() || "„Åç„Çá„ÅÜ„Åø„Åó„Çì„Åó„ÇìÔºü"
  };
}
